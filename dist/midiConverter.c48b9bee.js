!function(I){var g={};function C(n){if(g[n])return g[n].exports;var A=g[n]={i:n,l:!1,exports:{}};return I[n].call(A.exports,A,A.exports,C),A.l=!0,A.exports}C.m=I,C.c=g,C.d=function(I,g,n){C.o(I,g)||Object.defineProperty(I,g,{enumerable:!0,get:n})},C.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},C.t=function(I,g){if(1&g&&(I=C(I)),8&g)return I;if(4&g&&"object"==typeof I&&I&&I.__esModule)return I;var n=Object.create(null);if(C.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:I}),2&g&&"string"!=typeof I)for(var A in I)C.d(n,A,function(g){return I[g]}.bind(null,A));return n},C.n=function(I){var g=I&&I.__esModule?function(){return I.default}:function(){return I};return C.d(g,"a",g),g},C.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},C.p="dist/",C(C.s=4)}([function(module,exports,__webpack_require__){eval("module.exports = __webpack_require__(2);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvci9pbmRleC5qcz9hMzRhIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG4iXSwibWFwcGluZ3MiOiJBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n")},function(module,exports){eval('function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IuanM/Yzk3MyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7XG4gIHRyeSB7XG4gICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpO1xuICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVqZWN0KGVycm9yKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaW5mby5kb25lKSB7XG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cbiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTtcbiAgICAgIH1cblxuICAgICAgX25leHQodW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXN5bmNUb0dlbmVyYXRvcjsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n')},function(module,exports,__webpack_require__){eval('/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === "object" && self);\n})() || Function("return this")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = __webpack_require__(3);\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUtbW9kdWxlLmpzP2JiZGQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vLyBUaGlzIG1ldGhvZCBvZiBvYnRhaW5pbmcgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QgbmVlZHMgdG8gYmVcbi8vIGtlcHQgaWRlbnRpY2FsIHRvIHRoZSB3YXkgaXQgaXMgb2J0YWluZWQgaW4gcnVudGltZS5qc1xudmFyIGcgPSAoZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzIHx8ICh0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiAmJiBzZWxmKTtcbn0pKCkgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xuXG4vLyBVc2UgYGdldE93blByb3BlcnR5TmFtZXNgIGJlY2F1c2Ugbm90IGFsbCBicm93c2VycyBzdXBwb3J0IGNhbGxpbmdcbi8vIGBoYXNPd25Qcm9wZXJ0eWAgb24gdGhlIGdsb2JhbCBgc2VsZmAgb2JqZWN0IGluIGEgd29ya2VyLiBTZWUgIzE4My5cbnZhciBoYWRSdW50aW1lID0gZy5yZWdlbmVyYXRvclJ1bnRpbWUgJiZcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZykuaW5kZXhPZihcInJlZ2VuZXJhdG9yUnVudGltZVwiKSA+PSAwO1xuXG4vLyBTYXZlIHRoZSBvbGQgcmVnZW5lcmF0b3JSdW50aW1lIGluIGNhc2UgaXQgbmVlZHMgdG8gYmUgcmVzdG9yZWQgbGF0ZXIuXG52YXIgb2xkUnVudGltZSA9IGhhZFJ1bnRpbWUgJiYgZy5yZWdlbmVyYXRvclJ1bnRpbWU7XG5cbi8vIEZvcmNlIHJlZXZhbHV0YXRpb24gb2YgcnVudGltZS5qcy5cbmcucmVnZW5lcmF0b3JSdW50aW1lID0gdW5kZWZpbmVkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL3J1bnRpbWVcIik7XG5cbmlmIChoYWRSdW50aW1lKSB7XG4gIC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIHJ1bnRpbWUuXG4gIGcucmVnZW5lcmF0b3JSdW50aW1lID0gb2xkUnVudGltZTtcbn0gZWxzZSB7XG4gIC8vIFJlbW92ZSB0aGUgZ2xvYmFsIHByb3BlcnR5IGFkZGVkIGJ5IHJ1bnRpbWUuanMuXG4gIHRyeSB7XG4gICAgZGVsZXRlIGcucmVnZW5lcmF0b3JSdW50aW1lO1xuICB9IGNhdGNoKGUpIHtcbiAgICBnLnJlZ2VuZXJhdG9yUnVudGltZSA9IHVuZGVmaW5lZDtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n')},function(module,exports){eval('/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  "use strict";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === "function" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || "@@iterator";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";\n  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";\n\n  var inModule = typeof module === "object";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we\'re in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don\'t bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we\'re in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there\'s no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don\'t have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: "normal", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: "throw", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = "suspendedStart";\n  var GenStateSuspendedYield = "suspendedYield";\n  var GenStateExecuting = "executing";\n  var GenStateCompleted = "completed";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don\'t natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = "GeneratorFunction";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    ["next", "throw", "return"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === "function" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === "GeneratorFunction"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = "GeneratorFunction";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, "__await")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === "throw") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === "object" &&\n            hasOwn.call(value, "__await")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke("next", value, resolve, reject);\n          }, function(err) {\n            invoke("throw", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke("throw", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error("Generator is already running");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === "throw") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === "next") {\n          // Setting context._sent for legacy support of Babel\'s\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === "throw") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === "return") {\n          context.abrupt("return", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === "normal") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === "throw") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = "throw";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === "throw") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = "return";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === "throw") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // "return" to "throw", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = "throw";\n        context.arg = new TypeError(\n          "The iterator does not provide a \'throw\' method");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === "throw") {\n      context.method = "throw";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = "throw";\n      context.arg = new TypeError("iterator result is not an object");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was "throw" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was "next", forget context.arg since it has been\n      // "consumed" by the delegate iterator. If context.method was\n      // "return", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== "return") {\n        context.method = "next";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = "Generator";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers\' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn\'t happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return "[object Generator]";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = "normal";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: "root" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === "function") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel\'s\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = "next";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === "t" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === "throw") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = "throw";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = "next";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === "root") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle("end");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, "catchLoc");\n          var hasFinally = hasOwn.call(entry, "finallyLoc");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error("try statement without catch or finally");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, "finallyLoc") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === "break" ||\n           type === "continue") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = "next";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === "throw") {\n        throw record.arg;\n      }\n\n      if (record.type === "break" ||\n          record.type === "continue") {\n        this.next = record.arg;\n      } else if (record.type === "return") {\n        this.rval = this.arg = record.arg;\n        this.method = "return";\n        this.next = "end";\n      } else if (record.type === "normal" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    "catch": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === "throw") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error("illegal catch attempt");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === "next") {\n        // Deliberately forget the last sent value so that we don\'t\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we\'re in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === "object" && self);\n  })() || Function("return this")()\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./app/lib/constants.js\nvar TEXT = 'text';\nvar MAPDATA = 'mapdata';\nvar MUSIC = 'music';\nvar MIDI = 'midi';\nvar MP3 = 'mp3';\nvar PNG = 'png';\nvar MUS = 'mus';\nvar GRAPHIC = 'graphic';\nvar FLAT = 'flat';\nvar MARKER = 'marker';\nvar ENDOOM = 'ENDOOM';\nvar TEXTUREx = ['TEXTURE1', 'TEXTURE2'];\nvar TEXTLUMPS = ['DEHACKED', 'MAPINFO', 'ZMAPINFO', 'EMAPINFO', 'DMXGUS', 'DMXGUSC', 'WADINFO', 'EMENUS', 'MUSINFO', 'SNDINFO', 'GLDEFS', 'KEYCONF', 'SCRIPTS', 'LANGUAGE', 'DECORATE', 'SBARINFO', 'MENUDEF'];\nvar DATA_LUMPS = ['PLAYPAL', 'COLORMAP', 'TEXTURE1', 'TEXTURE2', 'PNAMES', 'ENDOOM'];\nvar DEFAULT_EXTENSION = 'lmp';\nvar EXTENSIONS = {\n  text: 'txt',\n  mp3: 'mp3',\n  mus: 'mus',\n  midi: 'mid',\n  png: 'png'\n};\n/* Environment */\n\nvar NO_BRAND_ENV = 'development-no-brand';\n/* Workers */\n\nvar SERVICE_WORKER_CORE = 'service-worker-core.js';\nvar WEB_WORKER_MAX_RETRIES = 1;\n/* Web worker internal errors */\n\nvar INVALID_TEXT = 'INVALID_TEXT';\n/* Themes */\n\nvar DARK_THEME = 'dark';\nvar LIGHT_THEME = 'light';\n/* Input types */\n\nvar CHECKBOX = 'checkbox';\n/* File formats */\n\nvar SUPPORTED_FORMATS = ['.wad', '.zip', '.pk3', '.json'];\nvar VALID_FILE_FORMATS = ['', 'application/x-doom', 'application/zip', 'application/json'];\n/* WAD types */\n\nvar IWAD = 'IWAD';\nvar PWAD = 'PWAD';\nvar VALID_WAD_TYPES = [IWAD, PWAD];\n/* Lump types */\n\nvar MAP = 'maps';\nvar INTERMISSION = 'intermission';\nvar STATUS_BAR = 'status bar';\nvar MENU = 'menu';\nvar IMAGE_LUMPS = ['patches', 'flats', 'sprites', MENU, INTERMISSION, STATUS_BAR];\nvar UNCATEGORIZED = 'uncategorized';\n/* Lump names */\n\nvar THINGS = 'THINGS';\nvar TEXTMAP = 'TEXTMAP';\nvar ENDMAP = 'ENDMAP';\nvar MAP_LUMPS = [THINGS, 'LINEDEFS', 'SIDEDEFS', 'VERTEXES', 'SEGS', 'TEXTMAP', 'SSECTORS', 'NODES', 'SECTORS', 'REJECT', 'BLOCKMAP', // Hexen only\n'BEHAVIOR', // ZDoom only? (optional)\n'SCRIPTS', // Universal Doom Map Format only\n'ZNODES', 'DIALOGUE'];\nvar OPENGL_MAP_LUMPS = ['GL_VERT', 'GL_SEGS', 'GL_SSECT', 'GL_NODES', 'GL_PVS'];\nvar START_MARKERS = new RegExp(/^[0-9a-zA-Z]{0,2}_START$/);\nvar END_MARKERS = new RegExp(/^[0-9a-zA-Z]{0,2}_END$/);\nvar TEXTURE_LUMPS = new RegExp(/^TEXTURE[0-9a-zA-Z]$/);\nvar INTERMISSION_LUMPS = new RegExp(/^WI[0-9a-zA-Z_]{1,}$/); // Doom II\n\nvar INTERMISSION_MAP_NAME_LUMPS = new RegExp(/^CWILV[0-9a-zA-Z_]{1,}$/);\nvar STATUS_BAR_LUMPS = new RegExp(/^(ST|AMM|BRDR_)[0-9a-zA-Z_]{1,}$/);\n/* Unique lumps */\n\nvar ANSI_LUMPS = [// Doom or Chex Quest\n'ENDOOM', // Heretic\n'ENDTEXT', // Strife\n'ENDSTRF', // Boom\n'ENDBOOM' // lack of ANSI lump in IWAD = Hexen\n];\nvar MAPINFO = ['MAPINFO', 'ZMAPINFO'];\nvar PLAYPAL = 'PLAYPAL';\nvar COLORMAP = 'COLORMAP';\nvar PNAMES = 'PNAMES';\nvar SBARINFO = 'SBARINFO'; // Hexen only\n\nvar SNDINFO = 'SNDINFO';\nvar MENU_SCREENS = ['TITLEPIC', 'HELP', 'HELP1', 'HELP2', 'CREDIT'];\nvar INTER_SCREENS = ['INTERPIC', // Doom 1 registered\n'ENDPIC', 'VICTORY2', 'PFUB1', 'PFUB2', // Doom 2\n'BOSSBACK'];\nvar MUSIC_LUMPS = ['GENMIDI', 'DMXGUS', 'DMXGUSC'];\nvar DEMO_LUMPS = ['DEMO1', 'DEMO2', 'DEMO3', 'DEMO4'];\nvar END_LUMPS = new RegExp(/^END[0-9]{1,}$/);\n/* Lump original formats */\n\nvar ANSI = 'ANSI';\n/* Lump special values */\n\nvar LUMP_INDEX_ENTRY_SIZE = 16;\nvar LUMP_INDEX_ENTRY_OFFSET_TO_LUMP_SIZE = 4;\nvar LUMP_INDEX_ENTRY_OFFSET_TO_LUMP_NAME = 8;\nvar COLOR_COUNT_PER_PALETTE = 256;\nvar PALETTE_SIZE = 768;\nvar COLORMAP_SIZE = 256;\nvar BYTES_PER_COLOR = 3;\nvar GREEN_COLOR_OFFSET = 1;\nvar BLUE_COLOR_OFFSET = 2;\nvar FLAT_DIMENSIONS = 64;\nvar IMAGE_DATA_HEADER_SIZE = 8;\nvar IMAGE_DATA_BOUNDARY = 255;\nvar TRANSPARENT_PIXEL = -1;\nvar HEXEN_SOUND_ARCHIVE_PATH = '$ARCHIVEPATH';\nvar HEXEN_SOUND_REGISTERED = '$REGISTERED';\nvar HEXEN_MUSIC_KEYWORD = '$MAP';\n/* MUS -> MIDI conversion */\n\nvar MUS_HEADER = 'MUS';\nvar MUS_HEADER_SIGNATURE = ['M'.charCodeAt(0), 'U'.charCodeAt(0), 'S'.charCodeAt(0), 0x1a].join(' ');\nvar MIDI_HEADER = 'MThd';\nvar MIDI_HEADER_SIZE = 4;\nvar MIDI_HEADER_DATA = ['M'.charCodeAt(0), 'T'.charCodeAt(0), 'h'.charCodeAt(0), 'd'.charCodeAt(0), // Main header\n0x00, 0x00, 0x00, 0x06, // Header size\n0x00, 0x00, // MIDI type (0)\n0x00, 0x01, // Number of tracks\n0x00, 0x46, // Resolution\n'M'.charCodeAt(0), 'T'.charCodeAt(0), 'r'.charCodeAt(0), 'k'.charCodeAt(0), // Start of track\n0x00, 0x00, 0x00, 0x00 // Placeholder for track length\n];\nvar MUS_NUM_CHANNELS = 16;\nvar MUS_PERCUSSION_CHANNEL = 15;\nvar MIDI_PERCUSSION_CHANNEL = 9;\nvar MIDI_TRACKLENGTH_OFS = 18;\nvar MIDI_CONTROLLER_MAP = [0x00, 0x20, 0x01, 0x07, 0x0a, 0x0b, 0x5b, 0x5d, 0x40, 0x43, 0x78, 0x7b, 0x7e, 0x7f, 0x79]; // MUS event codes\n\nvar MUS_RELEASE_KEY = 0x00;\nvar MUS_PRESS_KEY = 0x10;\nvar MUS_PITCH_WHEEL = 0x20;\nvar MUS_SYSTEM_EVENT = 0x30;\nvar MUS_CHANGE_CONTROLLER = 0x40;\nvar MUS_SCORE_END = 0x60; // MIDI event codes\n\nvar MIDI_RELEASE_KEY = 0x80;\nvar MIDI_PRESS_KEY = 0x90;\nvar MIDI_CHANGE_CONTROLLER = 0xb0;\nvar MIDI_CHANGE_PATCH = 0xc0;\nvar MIDI_PITCH_WHEEL = 0xe0;\n/* MIDI player */\n\nvar MAX_I16 = Math.pow(2, 15);\nvar MIDI_AUDIO_BUFFER_SIZE = 8192; // signed 16-bit samples\n\nvar MIDI_AUDIO_S16LSB = 0x8010;\nvar MIDI_PATCH_URL = '/public/midi/pat/';\nvar MIDI_PLAYER_MESSAGE_PREFIX = 'Midi player:';\nvar MIDI_ERROR = 'MIDI_ERROR';\nvar MIDI_STATUS = 'MIDI_STATUS';\nvar MIDI_PRELOAD = 'MIDI_PRELOAD';\nvar MIDI_LOAD_FILE = 'MIDI_LOAD_FILE';\nvar MIDI_LOAD_PATCH = 'MIDI_LOAD_PATCH';\nvar MIDI_PLAY = 'MIDI_PLAY';\nvar MIDI_PAUSE = 'MIDI_PAUSE';\nvar MIDI_RESUME = 'MIDI_RESUME';\nvar MIDI_STOP = 'MIDI_STOP';\nvar MIDI_END = 'MIDI_END';\n/* DMX -> PCM conversion */\n\nvar DMX_HEADER_SIZE = 18;\nvar DMX_TAIL_PADDING = 2;\n/* PCM Player */\n\nvar DEFAULT_PCM_SAMPLE_RATE = 11025;\nvar DEFAULT_PCM_CONFIGURATION = {\n  encoding: '8bit',\n  channels: 1,\n  volume: 1,\n  logging: false\n};\nvar PCM_MAX_VALUES = {\n  '8bit': 255,\n  '16bit': 65535,\n  '32bit': 4294967295,\n  '32bitFloat': 1\n};\nvar PCM_TYPED_ARRAYS = {\n  '8bit': Uint8Array,\n  '16bit': Uint16Array,\n  '32bit': Uint32Array,\n  '32bitFloat': Float32Array\n};\nvar PCM_PLAYER_MESSAGE_PREFIX = 'PCM player:';\nvar PCM_STATUS = 'PCM_STATUS';\nvar PCM_ERROR = 'PCM_ERROR';\nvar PCM_PLAY = 'PCM_PLAY';\nvar PCM_PAUSE = 'PCM_PAUSE';\nvar PCM_STOP = 'PCM_STOP';\nvar PCM_END = 'PCM_END';\n/* Map data */\n\nvar MAP_PADDING = 64;\nvar MAP_DATA_SCHEMAS = {\n  THINGS: {\n    size: 10,\n    properties: [{\n      name: 'x',\n      format: 'Int16'\n    }, {\n      name: 'y',\n      format: 'Int16'\n    }, {\n      name: 'angle',\n      format: 'Int16'\n    }, {\n      name: 'type',\n      format: 'Int16'\n    }, {\n      name: 'flags',\n      format: 'Int16'\n    }]\n  },\n  VERTEXES: {\n    size: 4,\n    properties: [{\n      name: 'x',\n      format: 'Int16'\n    }, {\n      name: 'y',\n      format: 'Int16'\n    }]\n  },\n  LINEDEFS: {\n    size: 14,\n    properties: [{\n      name: 'vertex1'\n    }, {\n      name: 'vertex2'\n    }, {\n      name: 'flags'\n    }, {\n      name: 'action'\n    }, {\n      name: 'tag'\n    }, {\n      name: 'rightSidedef'\n    }, {\n      name: 'leftSidedef'\n    }]\n  },\n  SIDEDEFS: {\n    size: 30,\n    properties: [{\n      name: 'xOffset'\n    }, {\n      name: 'yOffset'\n    }, {\n      name: 'upper',\n      format: 'name'\n    }, {\n      name: 'lower',\n      format: 'name'\n    }, {\n      name: 'middle',\n      format: 'name'\n    }, {\n      name: 'sector'\n    }]\n  },\n  SECTORS: {\n    size: 26,\n    properties: [{\n      name: 'zFloor'\n    }, {\n      name: 'zCeil'\n    }, {\n      name: 'floorFlat',\n      format: 'name'\n    }, {\n      name: 'ceilFlat',\n      format: 'name'\n    }, {\n      name: 'light'\n    }, {\n      name: 'type'\n    }, {\n      name: 'tag'\n    }]\n  },\n  SEGS: {\n    size: 12,\n    properties: [{\n      name: 'vertex1'\n    }, {\n      name: 'vertex2'\n    }, {\n      name: 'angle'\n    }, {\n      name: 'linedef'\n    }, {\n      name: 'direction'\n    }, {\n      name: 'offset'\n    }]\n  },\n  SSECTORS: {\n    size: 4,\n    properties: [{\n      name: 'segCount'\n    }, {\n      name: 'first'\n    }]\n  },\n  NODES: {\n    size: 28,\n    properties: [{\n      name: 'partitionX'\n    }, {\n      name: 'partitionY'\n    }, {\n      name: 'changeX'\n    }, {\n      name: 'changeY'\n    }, // different form original\n    {\n      name: 'boundsRightTop'\n    }, {\n      name: 'boundsRightBottom'\n    }, {\n      name: 'boundsRightLeft'\n    }, {\n      name: 'boundsRightRight'\n    }, // different form original\n    {\n      name: 'boundsLeftTop'\n    }, {\n      name: 'boundsLeftBottom'\n    }, {\n      name: 'boundsLeftLeft'\n    }, {\n      name: 'boundsLeftRight'\n    }, {\n      name: 'childRight'\n    }, {\n      name: 'childLeft'\n    }]\n  }\n};\nvar HEXEN_MAP_DATA_SCHEMAS = {\n  THINGS: {\n    size: 20,\n    properties: [{\n      name: 'tid',\n      format: 'Int16'\n    }, {\n      name: 'x',\n      format: 'Int16'\n    }, {\n      name: 'y',\n      format: 'Int16'\n    }, {\n      name: 'z',\n      format: 'Int16'\n    }, {\n      name: 'angle',\n      format: 'Int16'\n    }, {\n      name: 'type',\n      format: 'Int16'\n    }, {\n      name: 'flags',\n      format: 'Int16'\n    }, {\n      name: 'special',\n      format: 'Int8',\n      littleEndian: false\n    }, // different from original\n    {\n      name: 'arg0',\n      format: 'Int8',\n      littleEndian: false\n    }, {\n      name: 'arg1',\n      format: 'Int8',\n      littleEndian: false\n    }, {\n      name: 'arg2',\n      format: 'Int8',\n      littleEndian: false\n    }, {\n      name: 'arg3',\n      format: 'Int8',\n      littleEndian: false\n    }, {\n      name: 'arg4',\n      format: 'Int8',\n      littleEndian: false\n    }]\n  },\n  LINEDEFS: {\n    size: 16,\n    properties: [{\n      name: 'vertex1'\n    }, {\n      name: 'vertex2'\n    }, {\n      name: 'flags'\n    }, {\n      name: 'action',\n      format: 'Uint8',\n      littleEndian: false\n    }, // different from original\n    {\n      name: 'arg0',\n      format: 'Int8',\n      littleEndian: false\n    }, {\n      name: 'arg1',\n      format: 'Int8',\n      littleEndian: false\n    }, {\n      name: 'arg2',\n      format: 'Int8',\n      littleEndian: false\n    }, {\n      name: 'arg3',\n      format: 'Int8',\n      littleEndian: false\n    }, {\n      name: 'arg4',\n      format: 'Int8',\n      littleEndian: false\n    }, {\n      name: 'rightSidedef'\n    }, {\n      name: 'leftSidedef'\n    }]\n  }\n};\nvar DEFAULT_MAP_PALETTE = {\n  background: {\n    blue: 0,\n    green: 0,\n    red: 0\n  },\n  solidWall: {\n    blue: 0,\n    green: 0,\n    red: 255\n  },\n  lowerWall: {\n    blue: 75,\n    green: 123,\n    red: 191\n  },\n  upperWall: {\n    blue: 0,\n    green: 255,\n    red: 255\n  },\n  sameHeight: {\n    blue: 131,\n    green: 131,\n    red: 131\n  }\n};\n/* ANSI conversion */\n\nvar ANSI_CODE_PAGE_437_TABLES = ['', '☺', '☻', '♥', '♦', '♣', '♠', '•', '◘', '○', '◙', '♂', '♀', '♪', '♫', '☼', '►', '◄', '↕', '‼', '¶', '§', '▬', '↨', '↑', '↓', '→', '←', '∟', '↔', '▲', '▼', ' ', '!', '\"', '#', '$', '%', '&', \"'\", '(', ')', '*', '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', '\\\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '⌂', 'Ç', 'ü', 'é', 'â', 'ä', 'à', 'å', 'ç', 'ê', 'ë', 'è', 'ï', 'î', 'ì', 'Ä', 'Å', 'É', 'æ', 'Æ', 'ô', 'ö', 'ò', 'û', 'ù', 'ÿ', 'Ö', 'Ü', '¢', '£', '¥', '₧', 'ƒ', 'á', 'í', 'ó', 'ú', 'ñ', 'Ñ', 'ª', 'º', '¿', '⌐', '¬', '½', '¼', '¡', '«', '»', '░', '▒', '▓', '│', '┤', '╡', '╢', '╖', '╕', '╣', '║', '╗', '╝', '╜', '╛', '┐', '└', '┴', '┬', '├', '─', '┼', '╞', '╟', '╚', '╔', '╩', '╦', '╠', '═', '╬', '╧', '╨', '╤', '╥', '╙', '╘', '╒', '╓', '╫', '╪', '┘', '┌', '█', '▄', '▌', '▐', '▀', 'α', 'ß', 'Γ', 'π', 'Σ', 'σ', 'µ', 'τ', 'Φ', 'Θ', 'Ω', 'δ', '∞', 'φ', 'ε', '∩', '≡', '±', '≥', '≤', '⌠', '⌡', '÷', '≈', '°', '∙', '·', '√', 'ⁿ', '²', '■', ' '];\nvar ANSI_BACKGROUND_COLOR_CODES = ['black', 'blue', 'green', 'cyan', 'red', 'magenta', 'brown', 'light-gray'];\nvar ANSI_FOREGROUND_COLOR_CODES = ['black', 'blue', 'green', 'cyan', 'red', 'magenta', 'brown', 'light-gray', 'dark-gray', 'light-blue', 'light-green', 'light-cyan', 'light-red', 'light-magenta', 'yellow', 'white'];\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js\nvar regenerator = __webpack_require__(0);\nvar regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/asyncToGenerator.js\nvar asyncToGenerator = __webpack_require__(1);\nvar asyncToGenerator_default = /*#__PURE__*/__webpack_require__.n(asyncToGenerator);\n\n// CONCATENATED MODULE: ./app/lib/cacheManager.js\n\n\nvar setCacheItemAsBlob = function setCacheItemAsBlob(_ref) {\n  var cacheId = _ref.cacheId,\n      requestURL = _ref.requestURL,\n      responseData = _ref.responseData;\n  var response = new Response(responseData);\n  caches.open(cacheId).then(function (cache) {\n    return cache.put(requestURL, response);\n  });\n};\nvar getCacheItemAsArrayBuffer =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = asyncToGenerator_default()(\n  /*#__PURE__*/\n  regenerator_default.a.mark(function _callee(_ref2) {\n    var cacheId, requestURL, cache, response;\n    return regenerator_default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            cacheId = _ref2.cacheId, requestURL = _ref2.requestURL;\n            _context.prev = 1;\n            _context.next = 4;\n            return caches.open(cacheId);\n\n          case 4:\n            cache = _context.sent;\n            _context.next = 7;\n            return cache.match(requestURL);\n\n          case 7:\n            response = _context.sent;\n\n            if (response) {\n              _context.next = 10;\n              break;\n            }\n\n            return _context.abrupt(\"return\", null);\n\n          case 10:\n            _context.next = 12;\n            return response.arrayBuffer();\n\n          case 12:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 15:\n            _context.prev = 15;\n            _context.t0 = _context[\"catch\"](1);\n            console.error(\"An error occurred while retrieving cache of '\".concat(requestURL, \"'.\"), {\n              error: _context.t0\n            });\n            return _context.abrupt(\"return\", null);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 15]]);\n  }));\n\n  return function getCacheItemAsArrayBuffer(_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nvar getCacheItemAsBlob =\n/*#__PURE__*/\nfunction () {\n  var _ref5 = asyncToGenerator_default()(\n  /*#__PURE__*/\n  regenerator_default.a.mark(function _callee2(_ref4) {\n    var cacheId, requestURL, cache, response;\n    return regenerator_default.a.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            cacheId = _ref4.cacheId, requestURL = _ref4.requestURL;\n            _context2.prev = 1;\n            _context2.next = 4;\n            return caches.open(cacheId);\n\n          case 4:\n            cache = _context2.sent;\n            _context2.next = 7;\n            return cache.match(requestURL);\n\n          case 7:\n            response = _context2.sent;\n\n            if (response) {\n              _context2.next = 10;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", null);\n\n          case 10:\n            _context2.next = 12;\n            return response.blob();\n\n          case 12:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 15:\n            _context2.prev = 15;\n            _context2.t0 = _context2[\"catch\"](1);\n            console.error(\"An error occurred while retrieving cache of '\".concat(requestURL, \"'.\"), {\n              error: _context2.t0\n            });\n            return _context2.abrupt(\"return\", null);\n\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[1, 15]]);\n  }));\n\n  return function getCacheItemAsBlob(_x2) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nvar getCacheItemAsJson =\n/*#__PURE__*/\nfunction () {\n  var _ref7 = asyncToGenerator_default()(\n  /*#__PURE__*/\n  regenerator_default.a.mark(function _callee3(_ref6) {\n    var cacheId, requestURL, cache, response;\n    return regenerator_default.a.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            cacheId = _ref6.cacheId, requestURL = _ref6.requestURL;\n            _context3.prev = 1;\n            _context3.next = 4;\n            return caches.open(cacheId);\n\n          case 4:\n            cache = _context3.sent;\n            _context3.next = 7;\n            return cache.match(requestURL);\n\n          case 7:\n            response = _context3.sent;\n\n            if (response) {\n              _context3.next = 10;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", null);\n\n          case 10:\n            _context3.next = 12;\n            return response.json();\n\n          case 12:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 15:\n            _context3.prev = 15;\n            _context3.t0 = _context3[\"catch\"](1);\n            console.error(\"An error occurred while retrieving cache of '\".concat(requestURL, \"'.\"), {\n              error: _context3.t0\n            });\n            return _context3.abrupt(\"return\", null);\n\n          case 19:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[1, 15]]);\n  }));\n\n  return function getCacheItemAsJson(_x3) {\n    return _ref7.apply(this, arguments);\n  };\n}();\nvar getCacheItemAsText =\n/*#__PURE__*/\nfunction () {\n  var _ref9 = asyncToGenerator_default()(\n  /*#__PURE__*/\n  regenerator_default.a.mark(function _callee4(_ref8) {\n    var cacheId, requestURL, cache, response;\n    return regenerator_default.a.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            cacheId = _ref8.cacheId, requestURL = _ref8.requestURL;\n            _context4.prev = 1;\n            _context4.next = 4;\n            return caches.open(cacheId);\n\n          case 4:\n            cache = _context4.sent;\n            _context4.next = 7;\n            return cache.match(requestURL);\n\n          case 7:\n            response = _context4.sent;\n\n            if (response) {\n              _context4.next = 10;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", null);\n\n          case 10:\n            _context4.next = 12;\n            return response.text();\n\n          case 12:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 15:\n            _context4.prev = 15;\n            _context4.t0 = _context4[\"catch\"](1);\n            console.error(\"An error occurred while retrieving cache of '\".concat(requestURL, \"'.\"), {\n              error: _context4.t0\n            });\n            return _context4.abrupt(\"return\", null);\n\n          case 19:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[1, 15]]);\n  }));\n\n  return function getCacheItemAsText(_x4) {\n    return _ref9.apply(this, arguments);\n  };\n}();\nvar deleteCache =\n/*#__PURE__*/\nfunction () {\n  var _ref11 = asyncToGenerator_default()(\n  /*#__PURE__*/\n  regenerator_default.a.mark(function _callee5(_ref10) {\n    var cacheId;\n    return regenerator_default.a.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            cacheId = _ref10.cacheId;\n            _context5.prev = 1;\n            _context5.next = 4;\n            return caches.delete(cacheId);\n\n          case 4:\n            return _context5.abrupt(\"return\", true);\n\n          case 7:\n            _context5.prev = 7;\n            _context5.t0 = _context5[\"catch\"](1);\n            console.error(\"An error occurred while deleting cache of '\".concat(cacheId, \"'.\"), {\n              error: _context5.t0\n            });\n            return _context5.abrupt(\"return\", false);\n\n          case 11:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[1, 7]]);\n  }));\n\n  return function deleteCache(_x5) {\n    return _ref11.apply(this, arguments);\n  };\n}();\nvar deleteAllCache =\n/*#__PURE__*/\nfunction () {\n  var _ref12 = asyncToGenerator_default()(\n  /*#__PURE__*/\n  regenerator_default.a.mark(function _callee7() {\n    var cacheKeys;\n    return regenerator_default.a.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.prev = 0;\n            _context7.next = 3;\n            return caches.keys();\n\n          case 3:\n            cacheKeys = _context7.sent;\n            _context7.next = 6;\n            return cacheKeys.map(\n            /*#__PURE__*/\n            function () {\n              var _ref13 = asyncToGenerator_default()(\n              /*#__PURE__*/\n              regenerator_default.a.mark(function _callee6(key) {\n                return regenerator_default.a.wrap(function _callee6$(_context6) {\n                  while (1) {\n                    switch (_context6.prev = _context6.next) {\n                      case 0:\n                        _context6.next = 2;\n                        return caches.delete(key);\n\n                      case 2:\n                      case \"end\":\n                        return _context6.stop();\n                    }\n                  }\n                }, _callee6);\n              }));\n\n              return function (_x6) {\n                return _ref13.apply(this, arguments);\n              };\n            }());\n\n          case 6:\n            return _context7.abrupt(\"return\", true);\n\n          case 9:\n            _context7.prev = 9;\n            _context7.t0 = _context7[\"catch\"](0);\n            console.error('An error occurred while deleting the cache.', {\n              error: _context7.t0\n            });\n            return _context7.abrupt(\"return\", false);\n\n          case 13:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7, null, [[0, 9]]);\n  }));\n\n  return function deleteAllCache() {\n    return _ref12.apply(this, arguments);\n  };\n}();\n// CONCATENATED MODULE: ./app/webWorkers/midiConverter.js\n\n\n\n\nfunction readMusHeader(dataView) {\n    const id = [];\n\n    for (let i = 0; i < 4; i++) {\n        id.push(dataView.getUint8(i));\n    }\n\n    const musHeader = {\n        // used to check that this is a valid MUS file\n        id: id.join(' '),\n        scoreLength: dataView.getUint16(4, true),\n        // only this value is truly helpful to parse the MUS\n        scoreStart: dataView.getUint16(6, true),\n        primaryChannels: dataView.getUint16(8, true),\n        secondaryChannels: dataView.getUint16(10, true),\n        instrumentCount: dataView.getUint16(12, true)\n    };\n\n    return musHeader;\n}\n\nfunction isValidMusHeader(id) {\n    return MUS_HEADER_SIGNATURE === id;\n}\n\n// TODO: Send the error string in postMessage\n\nonmessage = async message => {\n    try {\n        const { wadId, lump } = message.data;\n\n        const { name, type, data, originalFormat } = lump;\n\n        const requestURL = `/midis/${wadId}/${name}`;\n\n        if (originalFormat === 'MIDI') {\n            setCacheItemAsBlob({\n                cacheId: wadId,\n                requestURL,\n                responseData: data\n            });\n\n            postMessage({\n                wadId,\n                lumpId: name,\n                lumpType: type,\n                output: requestURL\n            });\n\n            return;\n        }\n\n        const cachedItem = await getCacheItemAsArrayBuffer({\n            cacheId: wadId,\n            requestURL\n        });\n\n        if (cachedItem) {\n            postMessage({\n                wadId,\n                lumpId: name,\n                lumpType: type,\n                output: requestURL\n            });\n\n            return;\n        }\n\n        // console.log(`Converting '${type}/${name}' from MUS to MIDI (WAD: '${wadId}') ...`);\n\n        let musDataView;\n        let musDataPosition;\n\n        // Cached channel velocities\n        const channelvelocities = [\n            127,\n            127,\n            127,\n            127,\n            127,\n            127,\n            127,\n            127,\n            127,\n            127,\n            127,\n            127,\n            127,\n            127,\n            127,\n            127\n        ];\n\n        // Timestamps between sequences of MUS events\n        let queuedtime = 0;\n\n        // Counter for the length of the track\n        let tracksize;\n\n        const channelMap = [];\n\n        // Main DataView for writing to. This is used by writeData();\n        let outputDataView;\n\n        // Wrapper function to work like slade's memchunk.write()\n        // I'm so lazy\n        let position = 0;\n        let dataToWrite = [];\n        function writeData(bytes) {\n            dataToWrite = dataToWrite.concat(bytes);\n        }\n\n        function confirmWrite() {\n            const newBuffer = new ArrayBuffer(dataToWrite.length);\n            outputDataView = new DataView(newBuffer);\n            // Then write the data\n            for (let i = 0; i < dataToWrite.length; i++) {\n                outputDataView.setUint8(position, dataToWrite[i]);\n                position += 1;\n            }\n        }\n\n        // Write timestamp to a MIDI file.\n        function writeTime(time) {\n            let buffer = time & 0x7f;\n            let writeval;\n\n            while ((time >>= 7) != 0) {\n                buffer <<= 8;\n                buffer |= (time & 0x7f) | 0x80;\n            }\n\n            for (;;) {\n                writeval = buffer & 0xff;\n\n                writeData([writeval]);\n\n                tracksize += 1;\n\n                if ((buffer & 0x80) != 0) {\n                    buffer >>= 8;\n                } else {\n                    queuedtime = 0;\n                    return;\n                }\n            }\n        }\n\n        // Write the end of track marker\n        function writeEndTrack() {\n            const endtrack = [0xff, 0x2f, 0x00];\n\n            writeTime(queuedtime);\n\n            writeData(endtrack);\n\n            tracksize += 3;\n        }\n\n        // Write a key press event\n        function writePressKey(channel, key, velocity) {\n            // Write queued time\n            writeTime(queuedtime);\n\n            // Write pressed key and channel\n            let working = MIDI_PRESS_KEY | channel;\n            writeData([working]);\n\n            // Write key\n            working = key & 0x7f;\n            writeData([working]);\n\n            // Wite velocity\n            working = velocity & 0x7f;\n            writeData([working]);\n\n            tracksize += 3;\n        }\n\n        // Write a key release event\n        function writeReleaseKey(channel, key) {\n            // Write queued time\n            writeTime(queuedtime);\n\n            // Write released key\n            let working = MIDI_RELEASE_KEY | channel;\n            writeData([working]);\n\n            // Write key\n            working = key & 0x7f;\n            writeData([working]);\n\n            // Dummy\n            working = 0;\n            writeData([working]);\n\n            tracksize += 3;\n        }\n\n        // Write a pitch wheel/bend event\n        function writePitchWheel(channel, wheel) {\n            // Write queued time\n            writeTime(queuedtime);\n\n            let working = MIDI_PITCH_WHEEL | channel;\n            writeData([working]);\n\n            working = wheel & 0x7f;\n            writeData([working]);\n\n            working = (wheel >> 7) & 0x7f;\n            writeData([working]);\n\n            tracksize += 3;\n        }\n\n        // Write a patch change event\n        function writeChangePatch(channel, patch) {\n            // Write queued time\n            writeTime(queuedtime);\n\n            let working = MIDI_CHANGE_PATCH | channel;\n            writeData([working]);\n\n            working = patch & 0x7f;\n            writeData([working]);\n\n            tracksize += 2;\n        }\n\n        // Write a valued controller change event\n        function writeChangeControllerValued(channel, control, value) {\n            // Write queued time\n            writeTime(queuedtime);\n\n            let working = MIDI_CHANGE_CONTROLLER | channel;\n            writeData([working]);\n\n            working = control & 0x7f;\n            writeData([working]);\n\n            // Quirk in vanilla DOOM? MUS controller values should be 7-bit, not 8-bit.\n            working = value & 0x80 ? 0x7f : value;\n            writeData([working]);\n\n            tracksize += 3;\n        }\n\n        // Write a valueless controller change event\n        function writeChangeControllerValueless(channel, control) {\n            writeChangeControllerValued(channel, control, 0);\n        }\n\n        // Allocate a free MIDI channel.\n        function allocateMIDIChannel() {\n            let result;\n            let max;\n            let i;\n\n            // Find the current highest-allocated channel.\n\n            max = -1;\n\n            for (i = 0; i < MUS_NUM_CHANNELS; ++i) {\n                if (channelMap[i] > max) {\n                    max = channelMap[i];\n                }\n            }\n\n            // max is now equal to the highest-allocated MIDI channel.  We can\n            // now allocate the next available channel.  This also works if\n            // no channels are currently allocated (max=-1)\n\n            result = max + 1;\n\n            // Don't allocate the MIDI percussion channel!\n\n            if (result === MIDI_PERCUSSION_CHANNEL) {\n                ++result;\n            }\n\n            return result;\n        }\n\n        // Given a MUS channel number, get the MIDI channel number to use in the outputted file.\n        function getMIDIChannel(musChannel) {\n            // Find the MIDI channel to use for this MUS channel.\n            // MUS channel 15 is the percusssion channel.\n\n            if (musChannel === MUS_PERCUSSION_CHANNEL) {\n                return MIDI_PERCUSSION_CHANNEL;\n            }\n\n            // If a MIDI channel hasn't been allocated for this MUS channel\n            // yet, allocate the next free MIDI channel.\n\n            if (channelMap[musChannel] === -1) {\n                channelMap[musChannel] = allocateMIDIChannel();\n            }\n\n            return channelMap[musChannel];\n        }\n\n        function convertMusToMidi(musinput) {\n            // master dataview for input mus\n            musDataView = musinput;\n            musDataPosition = 0;\n\n            function getMusByte8() {\n                const output = musDataView.getUint8(musDataPosition);\n                musDataPosition += 1;\n                // console.log(output);\n                return output;\n            }\n\n            // master data for output midi\n            const outputArrayBuffer = new ArrayBuffer(0);\n            outputDataView = new DataView(outputArrayBuffer);\n\n            // Descriptor for the current MUS event\n            let eventdescriptor;\n            let channel; // Channel number\n            let musEvent;\n\n            // Bunch of vars read from MUS lump\n            let key;\n            let controllernumber;\n            let controllervalue;\n\n            // Flag for when the score end marker is hit.\n            let hitScoreEnd = false;\n\n            // Temp working byte\n            let working;\n            // Used in building up time delays\n            let timedelay;\n\n            // Initialise channel map to mark all channels as unused.\n            for (channel = 0; channel < MUS_NUM_CHANNELS; ++channel) {\n                channelMap[channel] = -1;\n            }\n\n            const musHeader = readMusHeader(musDataView);\n\n            if (!isValidMusHeader(musHeader.id)) {\n                console.error(\n                    `Invalid MUS header: '${\n                        musHeader.id\n                    }'. Expected: '${MUS_HEADER_SIGNATURE}'`\n                );\n                return false;\n            }\n\n            // Seek to where the data is held\n            musDataPosition = musHeader.scoreStart;\n            // So, we can assume the MUS file is faintly legit. Let's start writing MIDI data...\n\n            writeData(MIDI_HEADER_DATA);\n            tracksize = 0;\n\n            // Now, process the MUS file:\n            while (!hitScoreEnd) {\n                // Handle a block of events:\n\n                while (!hitScoreEnd) {\n                    // Fetch channel number and event code:\n                    eventdescriptor = getMusByte8();\n\n                    channel = getMIDIChannel(eventdescriptor & 0x0f);\n                    musEvent = eventdescriptor & 0x70;\n                    switch (musEvent) {\n                        case MUS_RELEASE_KEY:\n                            // console.log('MUS_RELEASE_KEY');\n                            key = getMusByte8();\n\n                            writeReleaseKey(channel, key);\n\n                            break;\n\n                        case MUS_PRESS_KEY:\n                            key = getMusByte8();\n\n                            if (key & 0x80) {\n                                channelvelocities[channel] = getMusByte8();\n\n                                channelvelocities[channel] &= 0x7f;\n\n                                // console.log('MUS_PRESS_KEY: '+key+ ' ' + channelvelocities[channel]);\n                            } else {\n                                // console.log('MUS_PRESS_KEY: '+key);\n                            }\n\n                            writePressKey(\n                                channel,\n                                key,\n                                channelvelocities[channel]\n                            );\n\n                            break;\n\n                        case MUS_PITCH_WHEEL:\n                            // console.log('MUS_PITCH_WHEEL');\n                            key = getMusByte8();\n\n                            writePitchWheel(channel, key * 64);\n\n                            break;\n\n                        case MUS_SYSTEM_EVENT:\n                            // console.log('MUS_SYSTEM_EVENT');\n                            controllernumber = getMusByte8();\n\n                            if (\n                                controllernumber < 10 ||\n                                controllernumber > 14\n                            ) {\n                                console.error(\n                                    `Controller number inaccurate 10-14: ${controllernumber}`\n                                );\n                                return false;\n                            }\n\n                            writeChangeControllerValueless(\n                                channel,\n                                MIDI_CONTROLLER_MAP[controllernumber]\n                            );\n\n                            break;\n\n                        case MUS_CHANGE_CONTROLLER:\n                            controllernumber = getMusByte8();\n                            controllervalue = getMusByte8();\n                            // console.log('MUS_CHANGE_CONTROLLER: ' +controllernumber+' '+controllervalue);\n                            if (controllernumber == 0) {\n                                writeChangePatch(channel, controllervalue);\n                            } else {\n                                if (\n                                    controllernumber < 1 ||\n                                    controllernumber > 9\n                                ) {\n                                    console.error(\n                                        `Controller number inaccurate: ${controllernumber}`\n                                    );\n                                    return false;\n                                }\n\n                                writeChangeControllerValued(\n                                    channel,\n                                    MIDI_CONTROLLER_MAP[controllernumber],\n                                    controllervalue\n                                );\n                            }\n\n                            break;\n\n                        case MUS_SCORE_END:\n                            // console.log('musScoreEnd');\n                            hitScoreEnd = true;\n                            break;\n\n                        default:\n                            // console.log('eventdescriptor default: '+eventdescriptor + ' ' + (eventdescriptor & 0x80));\n                            return false;\n                    }\n                    if ((eventdescriptor & 0x80) != 0) {\n                        // console.log('delay count');\n                        break;\n                    }\n                }\n                // Now we need to read the time code:\n                if (!hitScoreEnd) {\n                    // console.log('read time code');\n                    timedelay = 0;\n                    // delayCounter = 0;\n                    for (;;) {\n                        working = getMusByte8();\n                        // delayCounter += 1;\n                        timedelay = timedelay * 128 + (working & 0x7f);\n                        if ((working & 0x80) == 0) {\n                            break;\n                        }\n                    }\n                    // console.log('delay count: '+delayCounter + ' time delay: ' + timedelay)\n                    queuedtime += timedelay;\n                }\n            }\n            // console.log(`Converted '${lumpId}' from MUS to MIDI (WAD: '${wadId}').`);\n            // End of track\n            writeEndTrack();\n\n            confirmWrite();\n\n            // Write the track size into the stream\n            outputDataView.setUint8(\n                MIDI_TRACKLENGTH_OFS + 0,\n                (tracksize >> 24) & 0xff\n            );\n            outputDataView.setUint8(\n                MIDI_TRACKLENGTH_OFS + 1,\n                (tracksize >> 16) & 0xff\n            );\n            outputDataView.setUint8(\n                MIDI_TRACKLENGTH_OFS + 2,\n                (tracksize >> 8) & 0xff\n            );\n            outputDataView.setUint8(MIDI_TRACKLENGTH_OFS + 3, tracksize & 0xff);\n\n            return outputDataView.buffer;\n        }\n\n        const midi = convertMusToMidi(data);\n        if (!midi) {\n            console.error(\n                `Failed to convert '${type}/${name}' from MUS to MIDI (WAD: '${wadId}').`,\n                { musDataPosition }\n            );\n        }\n\n        setCacheItemAsBlob({ cacheId: wadId, requestURL, responseData: midi });\n\n        postMessage({\n            wadId,\n            lumpId: name,\n            lumpType: type,\n            output: requestURL\n        });\n    } catch (error) {\n        console.error('Something bad happened in midiConverter.', { error });\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n")}]);