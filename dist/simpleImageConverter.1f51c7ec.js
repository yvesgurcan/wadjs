!function(I){var n={};function g(B){if(n[B])return n[B].exports;var U=n[B]={i:B,l:!1,exports:{}};return I[B].call(U.exports,U,U.exports,g),U.l=!0,U.exports}g.m=I,g.c=n,g.d=function(I,n,B){g.o(I,n)||Object.defineProperty(I,n,{enumerable:!0,get:B})},g.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},g.t=function(I,n){if(1&n&&(I=g(I)),8&n)return I;if(4&n&&"object"==typeof I&&I&&I.__esModule)return I;var B=Object.create(null);if(g.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:I}),2&n&&"string"!=typeof I)for(var U in I)g.d(B,U,function(n){return I[n]}.bind(null,U));return B},g.n=function(I){var n=I&&I.__esModule?function(){return I.default}:function(){return I};return g.d(n,"a",n),n},g.o=function(I,n){return Object.prototype.hasOwnProperty.call(I,n)},g.p="",g(g.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./app/lib/constants.js\nvar TEXT = 'text';\nvar MAPDATA = 'mapdata';\nvar MUSIC = 'music';\nvar MIDI = 'midi';\nvar MP3 = 'mp3';\nvar PNG = 'png';\nvar MUS = 'mus';\nvar GRAPHIC = 'graphic';\nvar FLAT = 'flat';\nvar MARKER = 'marker';\nvar ENDOOM = 'ENDOOM';\nvar TEXTUREx = ['TEXTURE1', 'TEXTURE2'];\nvar TEXTLUMPS = ['DEHACKED', 'MAPINFO', 'ZMAPINFO', 'EMAPINFO', 'DMXGUS', 'DMXGUSC', 'WADINFO', 'EMENUS', 'MUSINFO', 'SNDINFO', 'GLDEFS', 'KEYCONF', 'SCRIPTS', 'LANGUAGE', 'DECORATE', 'SBARINFO', 'MENUDEF'];\nvar DATA_LUMPS = ['PLAYPAL', 'COLORMAP', 'TEXTURE1', 'TEXTURE2', 'PNAMES', 'ENDOOM'];\nvar DEFAULT_EXTENSION = 'lmp';\nvar EXTENSIONS = {\n  text: 'txt',\n  mp3: 'mp3',\n  mus: 'mus',\n  midi: 'mid',\n  png: 'png'\n};\n/* MIDI player */\n\nvar MAX_I16 = Math.pow(2, 15);\nvar MIDI_AUDIO_BUFFER_SIZE = 8192;\nvar ARCHIE = '/public/archie.png'; // signed 16-bit samples\n\nvar MIDI_AUDIO_S16LSB = 0x8010;\nvar MIDI_PATCH_URL = '/public/midi/pat/';\nvar MIDI_ERROR = 'MIDI_ERROR';\nvar MIDI_STATUS = 'MIDI_STATUS';\nvar MIDI_PRELOAD = 'MIDI_PRELOAD';\nvar MIDI_LOAD_FILE = 'MIDI_LOAD_FILE';\nvar MIDI_LOAD_PATCH = 'MIDI_LOAD_PATCH';\nvar MIDI_PLAY = 'MIDI_PLAY';\nvar MIDI_PAUSE = 'MIDI_PAUSE';\nvar MIDI_RESUME = 'MIDI_RESUME';\nvar MIDI_STOP = 'MIDI_STOP';\nvar MIDI_END = 'MIDI_END';\n/* File formats */\n\nvar SUPPORTED_FORMATS = ['.wad', '.zip', '.pk3', '.json'];\nvar VALID_FILE_FORMATS = ['', 'application/x-doom', 'application/zip', 'application/json'];\n/* WAD types */\n\nvar IWAD = 'IWAD';\nvar PWAD = 'PWAD';\nvar VALID_WAD_TYPES = [IWAD, PWAD];\n/* Lump types */\n\nvar MAP = 'maps';\nvar INTERMISSION = 'intermission';\nvar STATUS_BAR = 'status bar';\nvar MENU = 'menu';\nvar IMAGE_LUMPS = ['patches', 'flats', 'sprites', MENU, INTERMISSION, STATUS_BAR];\nvar UNCATEGORIZED = 'uncategorized';\n/* Lump names */\n\nvar THINGS = 'THINGS';\nvar TEXTMAP = 'TEXTMAP';\nvar ENDMAP = 'ENDMAP';\nvar MAP_LUMPS = [THINGS, 'LINEDEFS', 'SIDEDEFS', 'VERTEXES', 'SEGS', 'TEXTMAP', 'SSECTORS', 'NODES', 'SECTORS', 'REJECT', 'BLOCKMAP', // Hexen only\n'BEHAVIOR', // ZDoom only? (optional)\n'SCRIPTS', // Universal Doom Map Format only\n'ZNODES', 'DIALOGUE'];\nvar OPENGL_MAP_LUMPS = ['GL_VERT', 'GL_SEGS', 'GL_SSECT', 'GL_NODES', 'GL_PVS'];\nvar INTERMISSION_LUMPS = new RegExp(/WI[0-9a-zA-Z_]{1,}$/);\nvar STATUS_BAR_LUMPS = new RegExp(/(ST|AMM|BRDR_)[0-9a-zA-Z_]{1,}$/);\n/* Unique lumps */\n\nvar MAPINFO = ['MAPINFO', 'ZMAPINFO'];\nvar PLAYPAL = 'PLAYPAL';\nvar COLORMAP = 'COLORMAP';\nvar PNAMES = 'PNAMES';\nvar SBARINFO = 'SBARINFO';\nvar SNDINFO = 'SNDINFO'; // Hexen only\n\nvar MENU_SCREENS = ['TITLEPIC', 'HELP', 'HELP1', 'HELP2', 'CREDIT'];\nvar INTERMISSION_SCREEN = 'INTERPIC';\nvar MUSIC_LUMPS = ['GENMIDI', 'DMXGUS', 'DMXGUSC'];\nvar DEMO_LUMPS = ['DEMO1', 'DEMO2', 'DEMO3', 'DEMO4'];\n/* Lump special values */\n\nvar LUMP_INDEX_ENTRY_SIZE = 16;\nvar LUMP_INDEX_ENTRY_OFFSET_TO_LUMP_SIZE = 4;\nvar LUMP_INDEX_ENTRY_OFFSET_TO_LUMP_NAME = 8;\nvar COLOR_COUNT_PER_PALETTE = 256;\nvar PALETTE_SIZE = 768;\nvar COLORMAP_SIZE = 256;\nvar BYTES_PER_COLOR = 3;\nvar GREEN_COLOR_OFFSET = 1;\nvar BLUE_COLOR_OFFSET = 2;\nvar FLAT_DIMENSIONS = 64;\nvar IMAGE_DATA_HEADER_SIZE = 8;\nvar IMAGE_DATA_BOUNDARY = 255;\nvar TRANSPARENT_PIXEL = -1;\n/* MUS -> MIDI conversion */\n\nvar MUS_HEADER = 'MUS';\nvar MUS_HEADER_SIGNATURE = ['M'.charCodeAt(0), 'U'.charCodeAt(0), 'S'.charCodeAt(0), 0x1A].join(' ');\nvar MIDI_HEADER = 'MThd';\nvar MIDI_HEADER_SIZE = 4;\nvar MIDI_HEADER_DATA = ['M'.charCodeAt(0), 'T'.charCodeAt(0), 'h'.charCodeAt(0), 'd'.charCodeAt(0), // Main header\n0x00, 0x00, 0x00, 0x06, // Header size\n0x00, 0x00, // MIDI type (0)\n0x00, 0x01, // Number of tracks\n0x00, 0x46, // Resolution\n'M'.charCodeAt(0), 'T'.charCodeAt(0), 'r'.charCodeAt(0), 'k'.charCodeAt(0), // Start of track\n0x00, 0x00, 0x00, 0x00];\nvar MUS_NUM_CHANNELS = 16;\nvar MUS_PERCUSSION_CHANNEL = 15;\nvar MIDI_PERCUSSION_CHANNEL = 9;\nvar MIDI_TRACKLENGTH_OFS = 18;\nvar MIDI_CONTROLLER_MAP = [0x00, 0x20, 0x01, 0x07, 0x0A, 0x0B, 0x5B, 0x5D, 0x40, 0x43, 0x78, 0x7B, 0x7E, 0x7F, 0x79]; // MUS event codes\n\nvar MUS_RELEASE_KEY = 0x00;\nvar MUS_PRESS_KEY = 0x10;\nvar MUS_PITCH_WHEEL = 0x20;\nvar MUS_SYSTEM_EVENT = 0x30;\nvar MUS_CHANGE_CONTROLLER = 0x40;\nvar MUS_SCORE_END = 0x60; // MIDI event codes\n\nvar MIDI_RELEASE_KEY = 0x80;\nvar MIDI_PRESS_KEY = 0x90;\nvar MIDI_CHANGE_CONTROLLER = 0xB0;\nvar MIDI_CHANGE_PATCH = 0xC0;\nvar MIDI_PITCH_WHEEL = 0xE0;\n// CONCATENATED MODULE: ./app/workers/simpleImageConverter.js\n\n\nfunction buildColorIndexReferences(data) {\n    const colorIndexReferences = [];\n\n    for (let i = 0; i < data.byteLength; i++) {\n        colorIndexReferences.push(data.getUint8(i));\n    }\n\n    return colorIndexReferences;\n}\n\nasync function convertColorIndexesReferencesToBlob(\n    colorIndexReferences,\n    width,\n    height,\n    palette,\n) {\n    if (!palette || palette.length !== COLOR_COUNT_PER_PALETTE) {\n        console.error('The palette does not have enough colors to draw images.');\n        return null;\n    }\n\n    try {\n        const canvas = new OffscreenCanvas(height, width);\n        canvas.height = height;\n        canvas.width = width;\n        const context = canvas.getContext('2d');\n\n        const imageData = context.createImageData(\n            canvas.width,\n            canvas.height,\n        );\n\n        for (let i = 0; i < colorIndexReferences.length; i++) {\n            const { red, green, blue } = palette[colorIndexReferences[i]];\n            imageData.data[(i * 4) + 0] = red;\n            imageData.data[(i * 4) + 1] = green;\n            imageData.data[(i * 4) + 2] = blue;\n            imageData.data[(i * 4) + 3] = 255;\n        }\n        const newCanvas = new OffscreenCanvas(height, width);\n        newCanvas.height = imageData.height;\n        newCanvas.width = imageData.width;\n        newCanvas.getContext('2d').putImageData(imageData, 0, 0);\n        context.imageSmoothingEnabled = false;\n        context.drawImage(newCanvas, 0, 0);\n\n        const blob = await canvas.convertToBlob();\n\n        return blob;\n    } catch (error) {\n        console.error('An error occurred while converting the color index references to a blob', { error });\n        return '';\n    }\n}\n\nonmessage = async (message) => {\n    const {\n        wadId,\n        lump,\n        palette,\n    } = message.data;\n\n    const {\n        name, data, width, height,\n    } = lump;\n\n    console.log(`Converting '${name}' from simple color index references to PNG data URL (WAD: '${wadId}') ...`);\n\n    const colorIndexReferences = buildColorIndexReferences(data);\n\n    const blob = await convertColorIndexesReferencesToBlob(\n        colorIndexReferences,\n        width,\n        height,\n        palette,\n    );\n\n    if (blob) {\n        console.log(`Converted '${name}' from simple color index references to blob (WAD: '${wadId}').`);\n    } else {\n        console.error(`Could not convert '${name}' from simple color index references to blob (WAD: '${wadId}').`);\n    }\n\n    postMessage({\n        wadId,\n        lumpId: name,\n        image: blob,\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}]);